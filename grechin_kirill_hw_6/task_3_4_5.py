import json
import sys
from itertools import zip_longest

"""
3. Есть два файла: в одном хранятся ФИО пользователей сайта, а в другом — данные об их хобби. Известно,
что при хранении данных используется принцип: одна строка — один пользователь, разделитель между значениями —
запятая. Написать код, загружающий данные из обоих файлов и формирующий из них словарь: ключи — ФИО, значения —
данные о хобби. Сохранить словарь в файл. Проверить сохранённые данные. Если в файле, хранящем данные о хобби,
меньше записей, чем в файле с ФИО, задаём в словаре значение None. Если наоборот — выходим из скрипта с кодом «1».
При решении задачи считать, что объём данных в файлах во много раз меньше объема ОЗУ.
4. * (вместо 3) Решить задачу 3 для ситуации, когда объём данных в файлах превышает объём ОЗУ (разумеется, 
не нужно реально создавать такие большие файлы, это просто задел на будущее проекта). Также реализовать парсинг 
данных из файлов — получить отдельно фамилию, имя и отчество для пользователей и название каждого хобби: 
преобразовать в какой-нибудь контейнерный тип (список, кортеж, множество, словарь). Обосновать выбор типа. 
Подумать, какие могут возникнуть проблемы при парсинге. В словаре должны храниться данные, полученные в результате 
парсинга.
5. ** (вместо 4) Решить задачу 4 и реализовать интерфейс командной строки, чтобы можно было задать путь к
обоим исходным файлам и путь к выходному файлу со словарём. Проверить работу скрипта для случая, когда все файлы 
находятся в разных папках. 
"""

if len(sys.argv) == 4:
    with open(sys.argv[1], encoding='utf-8') as users:
        with open(sys.argv[2], encoding='utf-8') as hobbies:
            user_list = [line.strip().replace(',', ' ') for line in users]
            hobby_list = [line.strip().split(',') for line in hobbies]

            if len(hobby_list) > len(user_list):
                print('hobbies length must be less than users')
                sys.exit(1)

            dictionary = {
                user: {
                    'name': user.split()[1],
                    'surname': user.split()[0],
                    'patronymic': user.split()[2],
                    'hobby': hobby
                } for user, hobby in zip_longest(user_list, hobby_list)
            }
        with open(sys.argv[3], 'w', encoding='utf-8') as dict_json:
            json.dump(dictionary, dict_json, indent=3, ensure_ascii=False)
else:
    print('argvs error')
